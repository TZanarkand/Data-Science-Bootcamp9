# -*- coding: utf-8 -*-
"""Homework_ทบทวน

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkdzPdxNo8e7p-3HrbGnuObi0bvll3Bb

# 1. ATM
"""

from random import randint

class ATM:
    def __init__(self, account_name, bank_name, initial): ## double underscore เรียกว่า dunder
        self.account_name = account_name
        self.bank_name = bank_name
        self.balance = initial

    ## string representation
    def __str__(self):
        return f"This is an account of {self.account_name}, bank: {self.bank_name}"

    ## method => function
    def check_balance(self):
        print(f"Balance: {self.balance}")

    def deposit(self, money):
        self.balance += money
        print(f"Deposit successfully: your name balance: {self.balance} THB")

    def withdraw(self, money):
        self.balance -= money
        print(f"Withdraw successfully: your name balance: {self.balance} THB")

    def get_OTP(self):
        otp = randint(1000,9999)
        print(f"Your OTP: {otp}. This OTP will be available in the next 2 minutes.")

    def change_account_name(self, new_account_name):
        print(f"your previous name is {self.account_name}.")
        self.account_name = new_account_name
        print(f"now your current name is {self.account_name}.")

    def buy_subscription(self):
        while True:
            subscription_list = ["Youtube", "Spotify", "Joox"]
            print("subscription list")
            num = 1
            for i in subscription_list:
                print(f"{num}. {i.lower()}")
                num += 1

            your_subscription = str(input("Select your service from [subscription list] or type [stop] to exit: ").lower())
            print()
            if your_subscription == 'youtube':
                print('Thankyou for purchase Youtube Premium.')

            elif your_subscription == 'spotify':
                print('Thankyou for purchase Spotify Premium.')

            elif your_subscription == 'joox':
                print('Thankyou for purchase Joox Premium.')

            elif your_subscription == "stop":
                print("We are incredibly grateful for your trust and support in choosing our service.")
                break

            else:
                print ("Sorry you should choose something wrong. Please try again!!")

            print()

## build instance
acc1 = ATM("Sammy", "SCB", 1500)
acc2 = ATM("Ploy", "Krungthai", 2000)

## __str__
print(acc1)

## change account name
acc1.change_account_name("Sanny")

## buy service
acc1.buy_subscription()

"""# 2. Pao-Ying-Chup"""

import random

def game():
    # score and round
    your_score = 0
    bot_score = 0
    round = 1

    # player name
    my_name = input("What's your name: ")
    print(f"Hi {my_name}. Welcome to Pao-Ying-Chup Game")

    # weapon
    weapon = ["rock", "paper", "scissors"]

    while True:
        # select weapon
        bot_weapon = random.choice(weapon)
        your_weapon = input("Select your weapon: ").lower()

        # exit
        if your_weapon == "exit":
            print("game complete")
            print(f"my score is {your_score}")
            print(f"bot score is {bot_score}")
            if your_score > bot_score:
                print("YOU WIN")
            elif your_score < bot_score:
                print("YOU LOSE")
            else:
                print("YOU TIE")
            break

        # stop
        elif your_weapon == bot_weapon:
            print("YOU TIE")
            print(f"my score is {your_score}")
            print(f"bot score is {bot_score}")
            print(f"round: {round}")
            round += 1

        # win
        elif (your_weapon == "rock" and bot_weapon == "scissors") or \
            (your_weapon == "scissors" and bot_weapon == "paper") or \
            (your_weapon == "paper" and bot_weapon == "rock"):
            print(f"my weapon is {your_weapon} and bot weapon {bot_weapon}")
            print("YOU WIN")
            your_score += 1
            print(f"my score is {your_score}")
            print(f"bot score is {bot_score}")
            print(f"round: {round}")
            round += 1

        # lose
        elif (your_weapon == "rock" and bot_weapon == "paper") or \
            (your_weapon == "scissors" and bot_weapon == "rock") or \
            (your_weapon == "paper" and bot_weapon == "scissors"):
            print(f"my weapon is {your_weapon} and bot weapon {bot_weapon}")
            print("YOU LOSE")
            bot_score += 1
            print(f"my score is {your_score}")
            print(f"bot score is {bot_score}")
            print(f"round: {round}")
            round += 1

        # something wrong
        else:
            print("you choose something wrong!?")
            print("plz try it again.")

game()

"""# 3. API Star War (SWAPI)"""

## แบบที่สอน
from requests import get
from time import sleep

url = "https://swapi.dev/api/people/"

for i in range(5):
    index = i + 1
    new_url = url + str(index)
    resp = get(new_url).json()
    name = resp["name"]
    height = resp["height"]
    print(name, height)
    sleep(1)

## ฝึกทำ Homework
from requests import get
from time import sleep
import pandas as pd

characters = []

# name, gender, height, mass, birth_year, homeworld

for i in range(5):
    url = f"https://swapi.dev/api/people/{i+1}"
    resp = get(url).json()
    # ดึง API อีกรอบนึงเพราะ resp["homeworld"] มีค่าเป็น https://swapi.dev/api/planets/1/ และเลือกดึง field name มา
    homeworld = get(resp["homeworld"]).json()["name"]
    # แก้ field gender ที่ n/a เป็น unknown แทน
    gender = resp["gender"] if resp["gender"] != "n/a" else "unknown"
    characters.append(
            (resp["name"],
            gender,
            resp["height"],
            resp["mass"],
            resp["birth_year"],
            homeworld)
        )
    sleep(1) # cd 1 sec

print(characters)

df1 = pd.DataFrame(characters)
print(df1)

df1.to_csv("Starwar_101.csv", index = False)

"""# 4. Public API"""

from requests import get
from time import sleep
import pandas as pd

profile = []

for i in range(5):
    url = f"https://rickandmortyapi.com/api/character/{i+1}"
    respone = get(url)
    if respone.status_code == 200:
        respone = respone.json()
        profile.append(
                (respone["id"],
                respone["gender"],
                respone["name"],
                respone["status"],
                respone["species"],
                respone["type"])
            )
        sleep(1)
    else:
        print("Error")

df2 = pd.DataFrame(profile)

df2.to_csv("Rick_n_Morty.csv", index = False)

"""# 5. SKLearn"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

url = "/content/churn(1).csv"

churn = pd.read_csv("/content/churn(1).csv")

churn.head()

# prepare data
x = churn[["totaldaycalls","totalevecalls","totalnightcalls"]]
y = churn["churn"]

# split data
x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size = 0.20, random_state = 42
)

# train model
model = LogisticRegression()
model.fit(x_train, y_train)

# score
train_error = model.score(x_train, y_train)

# evaluate
test_error = model.score(x_test, y_test)

print(train_error, test_error)